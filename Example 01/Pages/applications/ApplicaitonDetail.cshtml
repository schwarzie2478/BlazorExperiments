@page "/application/{Id:int}"

@inject Example_01.Services.ApplicationState state

<nav>
    <div class="nav-wrapper orange">
        <a href="#" class="brand-logo">Application Details</a>
    </div>
</nav>
<div class="row">
    <div class="col s12 m6">
        <div class="card blue-grey darken-1">
            <div class="card-content white-text">
                <span class="card-title">@App.Name</span>
                <p>@App.Description</p>
            </div>
            <div class="card-action">
            </div>
        </div>
    </div>
</div>

@foreach (var role in App.ApplicationRoles)
{
    <li class="collection-item">
        <a class="title" href="applicationrole\@role.Id">@role.Name</a>
        <div>
            <button class="waves-effect waves-light btn" onclick="@(async () => await OnUpdateApplicationRole(role))">Update</button>
            <button class="waves-effect waves-light btn" onclick="@(async () => await OnDeleteApplicationRole(role.Id))">Delete</button>
        </div>
    </li>
}

<button class="waves-effect waves-light btn" onclick="@(async () => await OnCreateApplicationRole())">Add Application Role</button>

<a href=application>Go back to Applicataions</a>


@functions
{
    [Parameter] int Id { get; set; }

    Application App = new Application();

    protected override void OnInit()
    {
        state.OnChange += StateHasChanged;
    }
    protected async Task RefreshApplication()
    {
        await state.GetApplication(Id);
        App = state.ApplicationResult;
        StateHasChanged();
    }

    protected override async Task OnInitAsync()
    {
        await RefreshApplication();
    }

    protected async Task OnCreateApplicationRole()
    {
        var role = new ApplicationRole();
        role.Name = "Testing";
        state.CreateApplicationRole(App, role);
    }
    protected async Task OnDeleteApplicationRole(int Id)
    {

    }
    protected async Task OnUpdateApplicationRole(ApplicationRole role)
    {

    }


}