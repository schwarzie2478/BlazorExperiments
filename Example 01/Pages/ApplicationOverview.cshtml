@page "/application"

@using Example01.Models
@inject Example_01.Services.ApplicationState state
<H1>Application Editor</H1>

<table>
    <thead><tr><th>Application</th><th>Description</th><th>Actions</th></tr></thead>
    @foreach (var application in myApplications)
    {
     <tr>
        <td> <input id=Description bind=@application.Name /></td>
        <td> <input id=Description bind=@application.Description /></td>
        <td>
            <button class="waves-effect waves-light btn" onclick="@(async () => await OnUpdateApplication(application))">Update</button>
            <button class="waves-effect waves-light btn" onclick="@(async () => await OnDeleteApplications(application.Id))">Delete</button>
            </td>
    </tr>       
    }

</table>

<button class="waves-effect waves-light btn" onclick="@(async () => await OnCreateApplication())">Add Application</button>

@functions
{
    IEnumerable<Application>  myApplications = new List<Application>();

    protected override void OnInit()
    {
        state.OnChange += StateHasChanged;
    }

    protected async Task RefreshApplications()
    {
        await state.GetApplications();
        myApplications = state.ApplicationSearchResult;
        StateHasChanged();        
    }
    protected override async Task OnInitAsync()
    {
        await RefreshApplications();
    }
    protected async Task  OnCreateApplication()
    {
        var application = new Application();
        application.Name = DateTime.Now.Ticks.ToString();
        application.Description = $"Applicaiton Created at {DateTime.Now.ToString()}!";
        await state.CreateApplicaton(application);
        await RefreshApplications();

    }
    protected async Task OnDeleteApplications(int id)
    {
        await state.DeleteApplication(id);
        await RefreshApplications();
    }
    protected async Task OnUpdateApplication(Application application)
    {
        await state.UpdateApplication(application);
        await RefreshApplications();
    }
}